#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqToSQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataBase")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUniversity(University instance);
    partial void UpdateUniversity(University instance);
    partial void DeleteUniversity(University instance);
    partial void InsertStudant(Studant instance);
    partial void UpdateStudant(Studant instance);
    partial void DeleteStudant(Studant instance);
    partial void InsertLecture(Lecture instance);
    partial void UpdateLecture(Lecture instance);
    partial void DeleteLecture(Lecture instance);
    partial void InsertStudantLecture(StudantLecture instance);
    partial void UpdateStudantLecture(StudantLecture instance);
    partial void DeleteStudantLecture(StudantLecture instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::LinqToSQL.Properties.Settings.Default.DataBaseConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<University> Universities
		{
			get
			{
				return this.GetTable<University>();
			}
		}
		
		public System.Data.Linq.Table<Studant> Studants
		{
			get
			{
				return this.GetTable<Studant>();
			}
		}
		
		public System.Data.Linq.Table<Lecture> Lectures
		{
			get
			{
				return this.GetTable<Lecture>();
			}
		}
		
		public System.Data.Linq.Table<StudantLecture> StudantLectures
		{
			get
			{
				return this.GetTable<StudantLecture>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.University")]
	public partial class University : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Studant> _Studants;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public University()
		{
			this._Studants = new EntitySet<Studant>(new Action<Studant>(this.attach_Studants), new Action<Studant>(this.detach_Studants));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="University_Studant", Storage="_Studants", ThisKey="Id", OtherKey="UniversityId")]
		public EntitySet<Studant> Studants
		{
			get
			{
				return this._Studants;
			}
			set
			{
				this._Studants.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Studants(Studant entity)
		{
			this.SendPropertyChanging();
			entity.University = this;
		}
		
		private void detach_Studants(Studant entity)
		{
			this.SendPropertyChanging();
			entity.University = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Studant")]
	public partial class Studant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Age;
		
		private string _Gender;
		
		private int _UniversityId;
		
		private EntityRef<StudantLecture> _StudantLecture;
		
		private EntityRef<University> _University;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAgeChanging(int value);
    partial void OnAgeChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnUniversityIdChanging(int value);
    partial void OnUniversityIdChanged();
    #endregion
		
		public Studant()
		{
			this._StudantLecture = default(EntityRef<StudantLecture>);
			this._University = default(EntityRef<University>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniversityId", DbType="Int NOT NULL")]
		public int UniversityId
		{
			get
			{
				return this._UniversityId;
			}
			set
			{
				if ((this._UniversityId != value))
				{
					if (this._University.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUniversityIdChanging(value);
					this.SendPropertyChanging();
					this._UniversityId = value;
					this.SendPropertyChanged("UniversityId");
					this.OnUniversityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Studant_StudantLecture", Storage="_StudantLecture", ThisKey="Id", OtherKey="StudantId", IsUnique=true, IsForeignKey=false)]
		public StudantLecture StudantLecture
		{
			get
			{
				return this._StudantLecture.Entity;
			}
			set
			{
				StudantLecture previousValue = this._StudantLecture.Entity;
				if (((previousValue != value) 
							|| (this._StudantLecture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudantLecture.Entity = null;
						previousValue.Studant = null;
					}
					this._StudantLecture.Entity = value;
					if ((value != null))
					{
						value.Studant = this;
					}
					this.SendPropertyChanged("StudantLecture");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="University_Studant", Storage="_University", ThisKey="UniversityId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public University University
		{
			get
			{
				return this._University.Entity;
			}
			set
			{
				University previousValue = this._University.Entity;
				if (((previousValue != value) 
							|| (this._University.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._University.Entity = null;
						previousValue.Studants.Remove(this);
					}
					this._University.Entity = value;
					if ((value != null))
					{
						value.Studants.Add(this);
						this._UniversityId = value.Id;
					}
					else
					{
						this._UniversityId = default(int);
					}
					this.SendPropertyChanged("University");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lecture")]
	public partial class Lecture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<StudantLecture> _StudantLectures;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Lecture()
		{
			this._StudantLectures = new EntitySet<StudantLecture>(new Action<StudantLecture>(this.attach_StudantLectures), new Action<StudantLecture>(this.detach_StudantLectures));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecture_StudantLecture", Storage="_StudantLectures", ThisKey="Id", OtherKey="LectureId")]
		public EntitySet<StudantLecture> StudantLectures
		{
			get
			{
				return this._StudantLectures;
			}
			set
			{
				this._StudantLectures.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudantLectures(StudantLecture entity)
		{
			this.SendPropertyChanging();
			entity.Lecture = this;
		}
		
		private void detach_StudantLectures(StudantLecture entity)
		{
			this.SendPropertyChanging();
			entity.Lecture = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudantLecture")]
	public partial class StudantLecture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudantId;
		
		private int _LectureId;
		
		private EntityRef<Lecture> _Lecture;
		
		private EntityRef<Studant> _Studant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudantIdChanging(int value);
    partial void OnStudantIdChanged();
    partial void OnLectureIdChanging(int value);
    partial void OnLectureIdChanged();
    #endregion
		
		public StudantLecture()
		{
			this._Lecture = default(EntityRef<Lecture>);
			this._Studant = default(EntityRef<Studant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudantId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StudantId
		{
			get
			{
				return this._StudantId;
			}
			set
			{
				if ((this._StudantId != value))
				{
					if (this._Studant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudantIdChanging(value);
					this.SendPropertyChanging();
					this._StudantId = value;
					this.SendPropertyChanged("StudantId");
					this.OnStudantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LectureId", DbType="Int NOT NULL")]
		public int LectureId
		{
			get
			{
				return this._LectureId;
			}
			set
			{
				if ((this._LectureId != value))
				{
					if (this._Lecture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLectureIdChanging(value);
					this.SendPropertyChanging();
					this._LectureId = value;
					this.SendPropertyChanged("LectureId");
					this.OnLectureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecture_StudantLecture", Storage="_Lecture", ThisKey="LectureId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Lecture Lecture
		{
			get
			{
				return this._Lecture.Entity;
			}
			set
			{
				Lecture previousValue = this._Lecture.Entity;
				if (((previousValue != value) 
							|| (this._Lecture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lecture.Entity = null;
						previousValue.StudantLectures.Remove(this);
					}
					this._Lecture.Entity = value;
					if ((value != null))
					{
						value.StudantLectures.Add(this);
						this._LectureId = value.Id;
					}
					else
					{
						this._LectureId = default(int);
					}
					this.SendPropertyChanged("Lecture");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Studant_StudantLecture", Storage="_Studant", ThisKey="StudantId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Studant Studant
		{
			get
			{
				return this._Studant.Entity;
			}
			set
			{
				Studant previousValue = this._Studant.Entity;
				if (((previousValue != value) 
							|| (this._Studant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Studant.Entity = null;
						previousValue.StudantLecture = null;
					}
					this._Studant.Entity = value;
					if ((value != null))
					{
						value.StudantLecture = this;
						this._StudantId = value.Id;
					}
					else
					{
						this._StudantId = default(int);
					}
					this.SendPropertyChanged("Studant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
